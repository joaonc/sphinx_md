"""
Docstring for the test module.
"""
import pytest

from my_class import MyClass


def _is_ok(my_class: MyClass) -> bool:
    """
    Helper function in the test module.
    This is a private method and does not appear in the autogenerated documentation by default.

    :param my_class: An instance of `MyClass`.
    """
    return my_class.is_ok()


@pytest.fixture
def some_fixture(request):
    """
    A pytest fixture.

    :param request: `pytest`'s `request` object.
    :return: Nothing
    """
    pass


def test_something():
    """
    A test in the module (as opposed to in a class).
    """
    # Doesn't do anything
    assert True


class TestMyClass:
    """
    Docstring for the test class.
    """

    def test_is_ok(self):
        """
        Tests if it's ok.
        """
        assert MyClass(1, 'OK').is_ok() is True

    def test_is_not_ok(self):
        """
        Tests that it's not ok.
        """
        assert MyClass(0, 'ok').is_ok() is False


class TestAnother:
    """
    Another class with tests.
    """

    def test_using_fixture(self, some_fixture):
        """
        This test case uses a `pytest` fixture.
        """
        pass

    @pytest.mark.parametrize('color', ['red', 'green'])
    def test_parametrize(self, color):
        """
        Using `pytest`'s `parametrize`, which runs the test case multiple times with different parameter values.
        """
        pass

    @pytest.mark.parametrize('color', ['yellow', 'blue'])
    def test_fixture_and_parameterize(self, some_fixture, color):
        """
        Using both a `pytest` fixture and `parametrized`.
        """
        pass

    @pytest.mark.pri1
    def test_mark(self):
        """
        Test case with a `pytest` `mark`.
        """
        pass
